{"content":{"if":"{createNewInvoice: true}","do":"function get85PercentRuleDifference(orderType, orderedAmount, deliveredAmount) {\n        let invoicedAmount = (deliveredAmount || 0);\n        if (orderType === 'Eltern' && (deliveredAmount / orderedAmount) < 0.85) {\n            invoicedAmount = Math.round(orderedAmount * 0.85);\n        }\n        return invoicedAmount - deliveredAmount;\n    }\n    const getLineItemObject = (part, amountDelivered, shouldAppendText, positionNumber) => {\n        const textToAppend = '*Gemäß §10 (4) Vertragsbestimmungen werden 85% der ursprünglich bestellten Portionen abgerechnet.';\n        return {\n            'id': null,\n            'objectName': 'InvoicePos',\n            'mapAll': true,\n            'part': {\n                'id': part?.id,\n                'objectName': 'Part'\n            },\n            'quantity': amountDelivered,\n            'name': part?.name,\n            'unity': {\n                'id': 1,\n                'objectName': 'Unity'\n            },\n            'positionNumber': positionNumber,\n            'text': `Speisen gemäß des angehängten Beköstigungsnachweises\\n${shouldAppendText ? textToAppend : ''}`,\n            'taxRate': 19,\n            'price': '5.16',\n            'priceGross': '5.16'\n        };\n    };\n    // Environment Based Variables\n    const environmentName = task.config('envName');\n    const productionSevUser = 1231790;\n    const testSevUser = 1231790;\n    //let sevUserID = environmentName !== 'production' ? productionSevUser : testSevUser\n    const apiKey2 = task.config('SEVDESK_API_KEY');\n    const sevUserResponse = connectors.fetch({\n        url: `https://my.sevdesk.de/api/v1/SevUser`,\n        options: {\n            method: 'GET',\n            headers: {\n                Authorization: apiKey2\n            }\n        }\n    });\n    const sevUserID = sevUserResponse.body.objects[0].id;\n    console.log('sevTestResponse: ', sevUserID);\n    const instanceId = data?.task?.instanceid;\n    const contextSymbols = connectors.metamorphosV2.getContext(data.task.taskdata);\n    const startDatum = contextSymbols?.find((cs) => cs.id === 'StartDatum')?.value;\n    const endDatum = contextSymbols?.find((cs) => cs.id === 'EndDatum')?.value;\n    const schulecode = contextSymbols?.find((cs) => cs.id === 'Schulcode')?.value;\n    const customerNumber = contextSymbols?.find((cs) => cs.id === 'Bezirk Kundennummer')?.value;\n    const nameForAddress = contextSymbols?.find((rc) => rc.key === 'Bezirk Ansprechpartner')?.value;\n    const streetName = contextSymbols?.find((rc) => rc.key === 'Bezirk Adresse')?.value;\n    const postCode = contextSymbols?.find((rc) => rc.key === 'Bezirk PLZ')?.value;\n    const city = contextSymbols?.find((rc) => rc.key === 'Bezirk Stadt')?.value;\n    const allFiles = connectors.metamorphosV2.getFiles({\n        task: data.task.taskdata\n    });\n    const newFileParams = allFiles.find(cs => cs.id === 'BeköstigungsdatenSchule');\n    const bekoDelimiter = lib.helper.getDelimiter(newFileParams.value);\n    const bekoCsv = util.csv.toJSON(newFileParams.value, { delimiter: bekoDelimiter });\n    console.log('bekoCsv: ', bekoCsv);\n    const schools = connectors.postgreSqlDatabase.select({\n        query: `select * from schools where archived = false and instanceid = '${instanceId}'`,\n    });\n    const school = schools?.[0];\n    const schoolId = school?.id;\n    console.log('school: ', school);\n    // Aggregate BKN data \n    let hasElternRow = false;\n    let is85RuleApplied = false;\n    let totalMenues = 0;\n    let totalLunch = 0;\n    bekoCsv.forEach((row) => {\n        const bknArt = row[lib.attributes.InternalBKNAttributes.bknArt];\n        if (bknArt === 'ElternInfo')\n            return; // Nothing to do, row is only for display purpose\n        if (bknArt === 'Eltern')\n            hasElternRow = true;\n        const rowMenu1Ordered = parseInt(row[lib.attributes.InternalBKNAttributes.menu1Ordered] || 0);\n        const rowMenu1Delivered = parseInt(row[lib.attributes.InternalBKNAttributes.menu1Delivered] || 0);\n        const rowMenu2Ordered = parseInt(row[lib.attributes.InternalBKNAttributes.menu2Ordered] || 0);\n        const rowMenu2Delivered = parseInt(row[lib.attributes.InternalBKNAttributes.menu2Delivered] || 0);\n        const rowMenu3Ordered = parseInt(row[lib.attributes.InternalBKNAttributes.menu3Ordered] || 0);\n        const rowMenu3Delivered = parseInt(row[lib.attributes.InternalBKNAttributes.menu3Delivered] || 0);\n        const rowLunch = parseInt(row[lib.attributes.InternalBKNAttributes.lunch] || 0);\n        const rowTotalOrdered = rowMenu1Ordered + rowMenu2Ordered + rowMenu3Ordered;\n        const rowTotalDelivered = rowMenu1Delivered + rowMenu2Delivered + rowMenu3Delivered;\n        const rowDiffAmount85Rule = row[lib.attributes.InternalBKNAttributes.diffAmount85Rule]\n            ? parseInt(row[lib.attributes.InternalBKNAttributes.diffAmount85Rule])\n            : get85PercentRuleDifference(bknArt, rowTotalOrdered, rowTotalDelivered);\n        if (rowDiffAmount85Rule !== 0) {\n            is85RuleApplied = true;\n        }\n        totalMenues += (rowTotalDelivered + rowDiffAmount85Rule);\n        totalLunch += rowLunch;\n        console.log('rowMenu1Ordered: ', rowMenu1Ordered);\n        console.log('rowMenu1Delivered: ', rowMenu1Delivered);\n        console.log('rowMenu2Ordered: ', rowMenu2Ordered);\n        console.log('rowMenu2Delivered: ', rowMenu2Delivered);\n        console.log('rowMenu3Ordered: ', rowMenu3Ordered);\n        console.log('rowMenu3Delivered: ', rowMenu3Delivered);\n        console.log('rowLunch: ', rowLunch);\n        console.log('rowTotalOrdered: ', rowTotalOrdered);\n        console.log('rowTotalDelivered: ', rowTotalDelivered);\n        console.log('rowDiffAmount85Rule: ', rowDiffAmount85Rule);\n    });\n    console.log('totalMenues: ', totalMenues);\n    console.log('totalLunch: ', totalLunch);\n    const apiKey = task.config('SEVDESK_API_KEY');\n    // get Part (line item) information from SevDesk.\n    const productResponse = connectors.fetch({\n        url: `https://my.sevdesk.de/api/v1/Part`,\n        options: {\n            method: 'GET',\n            headers: {\n                Authorization: apiKey\n            }\n        }\n    });\n    console.log('productResponse: ', productResponse);\n    const parts = productResponse.body.objects;\n    const partMenu = parts.find((p) => p.partNumber === '1008');\n    const partLunch = parts.find((p) => p.partNumber === '1002');\n    let allTotal = 0;\n    const lineItems = [];\n    if (totalMenues) {\n        allTotal += totalMenues;\n        const lineItemMenu = getLineItemObject(partMenu, totalMenues, is85RuleApplied, 0);\n        lineItems.push(lineItemMenu);\n    }\n    if (totalLunch > 0) {\n        allTotal += totalLunch;\n        const lineItemLunch = getLineItemObject(partLunch, totalLunch, false, 3);\n        lineItems.push(lineItemLunch);\n    }\n    allTotal = allTotal.toLocaleString('de-DE');\n    const invoiceNumber = `RE-${data.nextInvoiceNumber}`;\n    const contactResponse = connectors.fetch({\n        url: `https://my.sevdesk.de/api/v1/Contact?customerNumber=${customerNumber}&depth=1`,\n        options: {\n            method: 'GET',\n            headers: {\n                Authorization: apiKey\n            }\n        }\n    });\n    console.log('contactResponse', contactResponse);\n    const contactToUse = contactResponse.body.objects.find((c) => c.parent);\n    console.log('contactToUse: ', contactToUse);\n    const contactId = contactToUse.id;\n    const newDate = new Date();\n    const newDay = newDate.getDate();\n    const newMonth = newDate.getMonth() + 1;\n    const newYear = newDate.getFullYear();\n    console.log('new date: ', `${newDay}.${newMonth}.${newYear}`);\n    const startDatumString = `${new Date(startDatum).getDate()}.${new Date(startDatum).getMonth() + 1}.${new Date(startDatum).getFullYear()}`;\n    const endDatumString = `${new Date(endDatum).getDate()}.${new Date(endDatum).getMonth() + 1}.${new Date(endDatum).getFullYear()}`;\n    const invoiceBody = {\n        'id': null,\n        'objectName': 'Invoice',\n        // 'invoiceNumber': invoiceNumber,\n        'invoiceNumber': null,\n        'contact': {\n            'id': contactId,\n            'objectName': 'Contact'\n        },\n        'contactPerson': {\n            'id': sevUserID,\n            'objectName': 'SevUser'\n        },\n        'invoiceDate': endDatumString,\n        'header': `Rechnung für die Schulversorgung von ${startDatumString} bis ${endDatumString} in der ${school?.data?.Schulnamen} (${schoolId})`,\n        'footText': `Gesamtsumme: <b>${allTotal}</b> Portionen<br><br>Bitte überweisen Sie den Gesamtbetrag ohne Abzug bis zum [%ZAHLUNGSZIEL%] auf das unten angegebene Konto.<br><br>Vielen Dank für Ihren Auftrag und Ihr Vertrauen!`,\n        // 'address': `\\n${streetName}\\n${postCode} ${city}`,\n        // 'addressCountry': {\n        //   'id': 1,\n        //   'objectName': 'StaticCountry'\n        // },\n        'timeToPay': 7,\n        'deliveryDate': startDatumString,\n        'deliveryDateUntil': endDatumString,\n        'status': '100',\n        // 'isNet': false,\n        'taxRate': 0,\n        'taxRule': {\n            'id': '1',\n            'objectName': 'TaxRule'\n        },\n        'invoiceType': 'RE',\n        'currency': 'EUR',\n        'showNet': '0',\n        'sendType': 'VM',\n        'origin': null,\n        'customerInternalNote': null,\n        'mapAll': true,\n    };\n    const requestBody = JSON.stringify({\n        invoice: invoiceBody,\n        invoicePosSave: lineItems\n    });\n    console.log('invoiceBody: ', invoiceBody);\n    console.log('lineItems: ', lineItems);\n    const invoiceResponse = connectors.fetch({\n        url: 'https://my.sevdesk.de/api/v1/Invoice/Factory/saveInvoice',\n        options: {\n            method: 'POST',\n            headers: {\n                Authorization: apiKey,\n                'Content-type': 'application/json'\n            },\n            body: requestBody\n        }\n    });\n    console.log('invoiceResponse: ', invoiceResponse);\n    const newInvoiceId = invoiceResponse.body.objects.invoice.id;\n    console.log('newInvoiceId: ', newInvoiceId);\n    const newInvoicePos = invoiceResponse.body.objects.invoicePos;\n    console.log('newInvoicePos: ', newInvoicePos);\n    if (!newInvoiceId) {\n        console.log('generating invoice failed');\n        throw 'Error';\n    }\n    const resp = connectors.postgreSqlDatabase.insert({\n        query: `insert into invoices (id, instanceid) values ('${newInvoiceId}', '${instanceId}')`,\n    });\n    data.postStepLogic = true;","enabled":true,"valid":true},"json":"{\"if\":\"{createNewInvoice: true}\",\"do\":\"function get85PercentRuleDifference(orderType, orderedAmount, deliveredAmount) {\\n        let invoicedAmount = (deliveredAmount || 0);\\n        if (orderType === 'Eltern' && (deliveredAmount / orderedAmount) < 0.85) {\\n            invoicedAmount = Math.round(orderedAmount * 0.85);\\n        }\\n        return invoicedAmount - deliveredAmount;\\n    }\\n    const getLineItemObject = (part, amountDelivered, shouldAppendText, positionNumber) => {\\n        const textToAppend = '*Gemäß §10 (4) Vertragsbestimmungen werden 85% der ursprünglich bestellten Portionen abgerechnet.';\\n        return {\\n            'id': null,\\n            'objectName': 'InvoicePos',\\n            'mapAll': true,\\n            'part': {\\n                'id': part?.id,\\n                'objectName': 'Part'\\n            },\\n            'quantity': amountDelivered,\\n            'name': part?.name,\\n            'unity': {\\n                'id': 1,\\n                'objectName': 'Unity'\\n            },\\n            'positionNumber': positionNumber,\\n            'text': `Speisen gemäß des angehängten Beköstigungsnachweises\\\\n${shouldAppendText ? textToAppend : ''}`,\\n            'taxRate': 19,\\n            'price': '5.16',\\n            'priceGross': '5.16'\\n        };\\n    };\\n    // Environment Based Variables\\n    const environmentName = task.config('envName');\\n    const productionSevUser = 1231790;\\n    const testSevUser = 1231790;\\n    //let sevUserID = environmentName !== 'production' ? productionSevUser : testSevUser\\n    const apiKey2 = task.config('SEVDESK_API_KEY');\\n    const sevUserResponse = connectors.fetch({\\n        url: `https://my.sevdesk.de/api/v1/SevUser`,\\n        options: {\\n            method: 'GET',\\n            headers: {\\n                Authorization: apiKey2\\n            }\\n        }\\n    });\\n    const sevUserID = sevUserResponse.body.objects[0].id;\\n    console.log('sevTestResponse: ', sevUserID);\\n    const instanceId = data?.task?.instanceid;\\n    const contextSymbols = connectors.metamorphosV2.getContext(data.task.taskdata);\\n    const startDatum = contextSymbols?.find((cs) => cs.id === 'StartDatum')?.value;\\n    const endDatum = contextSymbols?.find((cs) => cs.id === 'EndDatum')?.value;\\n    const schulecode = contextSymbols?.find((cs) => cs.id === 'Schulcode')?.value;\\n    const customerNumber = contextSymbols?.find((cs) => cs.id === 'Bezirk Kundennummer')?.value;\\n    const nameForAddress = contextSymbols?.find((rc) => rc.key === 'Bezirk Ansprechpartner')?.value;\\n    const streetName = contextSymbols?.find((rc) => rc.key === 'Bezirk Adresse')?.value;\\n    const postCode = contextSymbols?.find((rc) => rc.key === 'Bezirk PLZ')?.value;\\n    const city = contextSymbols?.find((rc) => rc.key === 'Bezirk Stadt')?.value;\\n    const allFiles = connectors.metamorphosV2.getFiles({\\n        task: data.task.taskdata\\n    });\\n    const newFileParams = allFiles.find(cs => cs.id === 'BeköstigungsdatenSchule');\\n    const bekoDelimiter = lib.helper.getDelimiter(newFileParams.value);\\n    const bekoCsv = util.csv.toJSON(newFileParams.value, { delimiter: bekoDelimiter });\\n    console.log('bekoCsv: ', bekoCsv);\\n    const schools = connectors.postgreSqlDatabase.select({\\n        query: `select * from schools where archived = false and instanceid = '${instanceId}'`,\\n    });\\n    const school = schools?.[0];\\n    const schoolId = school?.id;\\n    console.log('school: ', school);\\n    // Aggregate BKN data \\n    let hasElternRow = false;\\n    let is85RuleApplied = false;\\n    let totalMenues = 0;\\n    let totalLunch = 0;\\n    bekoCsv.forEach((row) => {\\n        const bknArt = row[lib.attributes.InternalBKNAttributes.bknArt];\\n        if (bknArt === 'ElternInfo')\\n            return; // Nothing to do, row is only for display purpose\\n        if (bknArt === 'Eltern')\\n            hasElternRow = true;\\n        const rowMenu1Ordered = parseInt(row[lib.attributes.InternalBKNAttributes.menu1Ordered] || 0);\\n        const rowMenu1Delivered = parseInt(row[lib.attributes.InternalBKNAttributes.menu1Delivered] || 0);\\n        const rowMenu2Ordered = parseInt(row[lib.attributes.InternalBKNAttributes.menu2Ordered] || 0);\\n        const rowMenu2Delivered = parseInt(row[lib.attributes.InternalBKNAttributes.menu2Delivered] || 0);\\n        const rowMenu3Ordered = parseInt(row[lib.attributes.InternalBKNAttributes.menu3Ordered] || 0);\\n        const rowMenu3Delivered = parseInt(row[lib.attributes.InternalBKNAttributes.menu3Delivered] || 0);\\n        const rowLunch = parseInt(row[lib.attributes.InternalBKNAttributes.lunch] || 0);\\n        const rowTotalOrdered = rowMenu1Ordered + rowMenu2Ordered + rowMenu3Ordered;\\n        const rowTotalDelivered = rowMenu1Delivered + rowMenu2Delivered + rowMenu3Delivered;\\n        const rowDiffAmount85Rule = row[lib.attributes.InternalBKNAttributes.diffAmount85Rule]\\n            ? parseInt(row[lib.attributes.InternalBKNAttributes.diffAmount85Rule])\\n            : get85PercentRuleDifference(bknArt, rowTotalOrdered, rowTotalDelivered);\\n        if (rowDiffAmount85Rule !== 0) {\\n            is85RuleApplied = true;\\n        }\\n        totalMenues += (rowTotalDelivered + rowDiffAmount85Rule);\\n        totalLunch += rowLunch;\\n        console.log('rowMenu1Ordered: ', rowMenu1Ordered);\\n        console.log('rowMenu1Delivered: ', rowMenu1Delivered);\\n        console.log('rowMenu2Ordered: ', rowMenu2Ordered);\\n        console.log('rowMenu2Delivered: ', rowMenu2Delivered);\\n        console.log('rowMenu3Ordered: ', rowMenu3Ordered);\\n        console.log('rowMenu3Delivered: ', rowMenu3Delivered);\\n        console.log('rowLunch: ', rowLunch);\\n        console.log('rowTotalOrdered: ', rowTotalOrdered);\\n        console.log('rowTotalDelivered: ', rowTotalDelivered);\\n        console.log('rowDiffAmount85Rule: ', rowDiffAmount85Rule);\\n    });\\n    console.log('totalMenues: ', totalMenues);\\n    console.log('totalLunch: ', totalLunch);\\n    const apiKey = task.config('SEVDESK_API_KEY');\\n    // get Part (line item) information from SevDesk.\\n    const productResponse = connectors.fetch({\\n        url: `https://my.sevdesk.de/api/v1/Part`,\\n        options: {\\n            method: 'GET',\\n            headers: {\\n                Authorization: apiKey\\n            }\\n        }\\n    });\\n    console.log('productResponse: ', productResponse);\\n    const parts = productResponse.body.objects;\\n    const partMenu = parts.find((p) => p.partNumber === '1008');\\n    const partLunch = parts.find((p) => p.partNumber === '1002');\\n    let allTotal = 0;\\n    const lineItems = [];\\n    if (totalMenues) {\\n        allTotal += totalMenues;\\n        const lineItemMenu = getLineItemObject(partMenu, totalMenues, is85RuleApplied, 0);\\n        lineItems.push(lineItemMenu);\\n    }\\n    if (totalLunch > 0) {\\n        allTotal += totalLunch;\\n        const lineItemLunch = getLineItemObject(partLunch, totalLunch, false, 3);\\n        lineItems.push(lineItemLunch);\\n    }\\n    allTotal = allTotal.toLocaleString('de-DE');\\n    const invoiceNumber = `RE-${data.nextInvoiceNumber}`;\\n    const contactResponse = connectors.fetch({\\n        url: `https://my.sevdesk.de/api/v1/Contact?customerNumber=${customerNumber}&depth=1`,\\n        options: {\\n            method: 'GET',\\n            headers: {\\n                Authorization: apiKey\\n            }\\n        }\\n    });\\n    console.log('contactResponse', contactResponse);\\n    const contactToUse = contactResponse.body.objects.find((c) => c.parent);\\n    console.log('contactToUse: ', contactToUse);\\n    const contactId = contactToUse.id;\\n    const newDate = new Date();\\n    const newDay = newDate.getDate();\\n    const newMonth = newDate.getMonth() + 1;\\n    const newYear = newDate.getFullYear();\\n    console.log('new date: ', `${newDay}.${newMonth}.${newYear}`);\\n    const startDatumString = `${new Date(startDatum).getDate()}.${new Date(startDatum).getMonth() + 1}.${new Date(startDatum).getFullYear()}`;\\n    const endDatumString = `${new Date(endDatum).getDate()}.${new Date(endDatum).getMonth() + 1}.${new Date(endDatum).getFullYear()}`;\\n    const invoiceBody = {\\n        'id': null,\\n        'objectName': 'Invoice',\\n        // 'invoiceNumber': invoiceNumber,\\n        'invoiceNumber': null,\\n        'contact': {\\n            'id': contactId,\\n            'objectName': 'Contact'\\n        },\\n        'contactPerson': {\\n            'id': sevUserID,\\n            'objectName': 'SevUser'\\n        },\\n        'invoiceDate': endDatumString,\\n        'header': `Rechnung für die Schulversorgung von ${startDatumString} bis ${endDatumString} in der ${school?.data?.Schulnamen} (${schoolId})`,\\n        'footText': `Gesamtsumme: <b>${allTotal}</b> Portionen<br><br>Bitte überweisen Sie den Gesamtbetrag ohne Abzug bis zum [%ZAHLUNGSZIEL%] auf das unten angegebene Konto.<br><br>Vielen Dank für Ihren Auftrag und Ihr Vertrauen!`,\\n        // 'address': `\\\\n${streetName}\\\\n${postCode} ${city}`,\\n        // 'addressCountry': {\\n        //   'id': 1,\\n        //   'objectName': 'StaticCountry'\\n        // },\\n        'timeToPay': 7,\\n        'deliveryDate': startDatumString,\\n        'deliveryDateUntil': endDatumString,\\n        'status': '100',\\n        // 'isNet': false,\\n        'taxRate': 0,\\n        'taxRule': {\\n            'id': '1',\\n            'objectName': 'TaxRule'\\n        },\\n        'invoiceType': 'RE',\\n        'currency': 'EUR',\\n        'showNet': '0',\\n        'sendType': 'VM',\\n        'origin': null,\\n        'customerInternalNote': null,\\n        'mapAll': true,\\n    };\\n    const requestBody = JSON.stringify({\\n        invoice: invoiceBody,\\n        invoicePosSave: lineItems\\n    });\\n    console.log('invoiceBody: ', invoiceBody);\\n    console.log('lineItems: ', lineItems);\\n    const invoiceResponse = connectors.fetch({\\n        url: 'https://my.sevdesk.de/api/v1/Invoice/Factory/saveInvoice',\\n        options: {\\n            method: 'POST',\\n            headers: {\\n                Authorization: apiKey,\\n                'Content-type': 'application/json'\\n            },\\n            body: requestBody\\n        }\\n    });\\n    console.log('invoiceResponse: ', invoiceResponse);\\n    const newInvoiceId = invoiceResponse.body.objects.invoice.id;\\n    console.log('newInvoiceId: ', newInvoiceId);\\n    const newInvoicePos = invoiceResponse.body.objects.invoicePos;\\n    console.log('newInvoicePos: ', newInvoicePos);\\n    if (!newInvoiceId) {\\n        console.log('generating invoice failed');\\n        throw 'Error';\\n    }\\n    const resp = connectors.postgreSqlDatabase.insert({\\n        query: `insert into invoices (id, instanceid) values ('${newInvoiceId}', '${instanceId}')`,\\n    });\\n    data.postStepLogic = true;\",\"enabled\":true,\"valid\":true}","hash":"91e61acdf62453422cf87b8ddd98739386f8a37210bd595438abbd4f0a3fbbc0","name":"BKN/12. Generate Invoice"}